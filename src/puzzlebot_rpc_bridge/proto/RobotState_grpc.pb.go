// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: RobotState.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RobotState_GetImage_FullMethodName = "/robotonotos.RobotState/GetImage"
)

// RobotStateClient is the client API for RobotState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotStateClient interface {
	// Sends a greeting
	GetImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImageReply, error)
}

type robotStateClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotStateClient(cc grpc.ClientConnInterface) RobotStateClient {
	return &robotStateClient{cc}
}

func (c *robotStateClient) GetImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, RobotState_GetImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotStateServer is the server API for RobotState service.
// All implementations must embed UnimplementedRobotStateServer
// for forward compatibility
type RobotStateServer interface {
	// Sends a greeting
	GetImage(context.Context, *empty.Empty) (*ImageReply, error)
	mustEmbedUnimplementedRobotStateServer()
}

// UnimplementedRobotStateServer must be embedded to have forward compatible implementations.
type UnimplementedRobotStateServer struct {
}

func (UnimplementedRobotStateServer) GetImage(context.Context, *empty.Empty) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedRobotStateServer) mustEmbedUnimplementedRobotStateServer() {}

// UnsafeRobotStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotStateServer will
// result in compilation errors.
type UnsafeRobotStateServer interface {
	mustEmbedUnimplementedRobotStateServer()
}

func RegisterRobotStateServer(s grpc.ServiceRegistrar, srv RobotStateServer) {
	s.RegisterService(&RobotState_ServiceDesc, srv)
}

func _RobotState_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotStateServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotState_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotStateServer).GetImage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RobotState_ServiceDesc is the grpc.ServiceDesc for RobotState service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RobotState_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "robotonotos.RobotState",
	HandlerType: (*RobotStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImage",
			Handler:    _RobotState_GetImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RobotState.proto",
}
